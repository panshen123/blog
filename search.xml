<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos7搭建自己的博客</title>
    <url>/2023/03/03/Service/</url>
    <content><![CDATA[<blockquote>
<p><strong>博客</strong>：其实博客的正式名称是网络日记，见名知意，是使用特定软件在网络上出版发表和张贴个人文章的人，或者是一种由个人管理不定期更新文章的网站。  </p>
</blockquote>
<p>现在是互联网逐渐发展，已经出现了很多可以供自己写博客的网站，大家可以在上面 发表自己的文章，供自己记录或者是供他人阅读。但是，可不可以自己搭建一个只属于自己的个人博客网站呢？这篇文章就带你从0开始搭建一个自己的个人博客网站，并部署到属于自己<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>。这里有一点要说的是，没有服务器的同学使用自己机器的linux系统也是一样的操作。我们选用一个很好用的博客框架Hexo进行搭建我们的个人博客。</p>
<h4 id="博客框架Hexo介绍："><a href="#博客框架Hexo介绍：" class="headerlink" title="博客框架Hexo介绍："></a>博客框架Hexo介绍：</h4><hr>
<p>Hexo是一个快速，简介而且高效的博客框架，Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可生成一个静态网页展示我们发布的文章，同时也提供了大量精美的博客主题供我们使用。</p>
<p><img src="/2023/03/03/Service/1.png"></p>
<h4 id="Hexo博客框架的优点"><a href="#Hexo博客框架的优点" class="headerlink" title="Hexo博客框架的优点"></a>Hexo博客框架的优点</h4><hr>
<ul>
<li>速度极快：Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li>
<li>支持MarkDown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li>
<li>一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他平台。</li>
<li>插件和可扩展性：这个也是hexo很强大的一个地方，强大的 API 带来无限的可能，与数种模板引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less&#x2F;Sass）轻易集成</li>
</ul>
<h4 id="Hexo博客框架搭建："><a href="#Hexo博客框架搭建：" class="headerlink" title="Hexo博客框架搭建："></a><strong>Hexo博客框架搭建：</strong></h4><hr>
<p>我们使用Centos7系统作为演示，使用其他linux系统也是可以的，只需要更换为对应Linux版本的软件安装命令即可。</p>
<p>1.安装Git</p>
<p>直接使用yum安装即可，在命令行输入 yum -y install git</p>
<p>完成之后输入git version 查看是否安装成功，如果显示git版本信息即为成功，如下：</p>
<p><img src="/2023/03/03/Service/2.png"></p>
<p>2.安装Node.js</p>
<p>Node.js是一种运行在服务端的JavaScript，是一个基于Chrome JavaScript运行时建立的一个平台。</p>
<p>Hexo基于Node.js，所以安装Node.js是必须的一个操作，安装步骤如下：</p>
<p><strong>2.1：下载安装包：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wget <span class="attr">https</span>:<span class="comment">//nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.xz</span></span><br></pre></td></tr></table></figure>

<p><strong>2.2：解压缩软件包并配置环境变量：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#解压</span><br><span class="line">tar -xvJf node-v6<span class="number">.10</span><span class="number">.1</span>-linux-x64.<span class="property">tar</span>.<span class="property">xz</span></span><br><span class="line"></span><br><span class="line">#移动到/usl/lcoal目录下</span><br><span class="line">mv node-v6<span class="number">.10</span><span class="number">.1</span>-linux-x64 /usr/local/node-v6</span><br><span class="line"></span><br><span class="line">#创建软链接</span><br><span class="line">ln -s /usr/local/node-v6/bin/node /bin/node</span><br><span class="line">ln -s /usr/local/node-v6/bin/npm /bin/npm</span><br><span class="line"></span><br><span class="line">#添加环境变量</span><br><span class="line">echo <span class="string">&#x27;export PATH=/usr/local/node-v6/bin:$PATH&#x27;</span> &gt;&gt; <span class="regexp">/etc/</span>profile</span><br><span class="line">source /etc/profile  #让环境变量生效</span><br></pre></td></tr></table></figure>

<p><strong>2.3：测试是否安装成功：</strong></p>
<p>在命令行输入node -v 和 npm -v，若是显示出了版本号，即为安装成功：</p>
<p><img src="/2023/03/03/Service/3.png"></p>
<p><strong>3.安装并使用Hexo</strong></p>
<p>Hexo的安装较为简单，使用如下命令安装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">#这里有一点要注意的就是，npm的源是在国外的，访问可能会很慢，这里可以换成我们国内的源进行安装加快速度。操作如下：</span><br><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/03/03/Service/4.png"></p>
<p><strong>3.1：初始化Hexo</strong></p>
<p>上面的安装完成之后执行下面的命令进行对Hexo进行一个初始化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#这个文件名字可以自己指定，之后会在当前目录下生成对应文件夹</span><br><span class="line">hexo init &lt;文件名字&gt;</span><br><span class="line">cd 文件名字</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>可以看到安装好之后的一个目录结构：</p>
<p><img src="/2023/03/03/Service/5.png"></p>
<p><strong>目录文件说明：</strong></p>
<p>_config.yml：网站的配置信息，您可以在此配置大部分的参数。</p>
<p>package.json：应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p>
<p>scaffolds：模版文件夹。当您新建文章时Hexo 会根据 scaffold 来建立文件Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold&#x2F;post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
<p>source：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p>
<p>themes：主题 文件夹。Hexo 会根据主题来生成静态页面。</p>
<p>查看hexo的版本以及对应的数据：</p>
<p><img src="/2023/03/03/Service/6.png"></p>
<p><strong>3.2生成静态文件，并开启Hexo服务：</strong></p>
<p>进入到了hexo的安装目录之后，使用hexo generate来生成静态文件，也可以使用hexo g，之后使用hexo server（可以写成hexo s）命令启动服务，操作如下：</p>
<p><img src="/2023/03/03/Service/7.png"></p>
<p>可以看到4000端口的服务已经开启，之后在你的浏览器输入http:&#x2F;&#x2F;&lt;你的linux机器的ip地址或者服务器公网地址&gt;:4000,如下可以看到最开始的一个界面：</p>
<p><img src="/2023/03/03/Service/8.png"></p>
<p><strong>4.初步使用Hexo：</strong></p>
<hr>
<p>使用前，我们对我们的站点进行一个配置，也就是我们创建的hexo目录的_config.yml文件，可以修改的部分介绍如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Site</span></span><br><span class="line"><span class="attr">title</span>: <span class="variable constant_">QIMING</span>.<span class="property">INFO</span> #博客网站的标题</span><br><span class="line"><span class="attr">subtitle</span>:          #博客网站的副标题</span><br><span class="line"><span class="attr">description</span>:       #你的网站描述</span><br><span class="line"><span class="attr">keywords</span>:          #网站的关键词  </span><br><span class="line"><span class="attr">author</span>:            #作者的名字</span><br><span class="line"><span class="attr">language</span>:          #博客网站使用的语言</span><br><span class="line"><span class="attr">timezone</span>:          #网站时区</span><br></pre></td></tr></table></figure>

<p>我自己的修改如下供大家参考，这里的修改没有太大的限制：</p>
<p><img src="/2023/03/03/Service/9.png"></p>
<p><strong>4.1：开始使用Hexo发布自己的第一篇博客！</strong></p>
<p>执行下面的目录创建一篇新文章：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> post &lt;文章标题&gt;</span><br></pre></td></tr></table></figure>

<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9Tz5aBlT-1622032930755)(pictures&#x2F;image-20210526145922392.png)]</p>
<p>这里我创建了一篇标题为First_Blog的博客，创建之后hexo目录下面的source&#x2F;_post文件夹下会产生一个First_Blog.md的文件</p>
<p><strong>4.2:编辑文章</strong></p>
<p>进入到上面说的那个目录下可以看到我们创建的博客文件：</p>
<p><img src="/2023/03/03/Service/10.png"></p>
<p>直接使用vim或者vi就可以对我们的博客文章进行编辑了，打开此First_Blog.md后可以看到—分隔的区域，这部分主要对文章进行标注变量，如下：</p>
<p><img src="/2023/03/03/Service/11.png"></p>
<p><strong>title</strong>：标题</p>
<p><strong>tage</strong>：标签</p>
<p><strong>categories</strong>：分类</p>
<p><strong>date</strong>：时间</p>
<p>这些标注大家在—–区域可以进行使用</p>
<p><strong>4.3：发布文章</strong></p>
<p>输入如下命令，生成静态网页，静态网页会存放在public文件下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo  g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>之后就可以去浏览器访问了！可以看到我们发布的文章已经成功在浏览器显示，到这里个人博客网站就已经成功搭建了。</p>
<p><img src="/2023/03/03/Service/12.png"></p>
<p><strong>5.主题的选择：</strong></p>
<p>主题网站：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a> hexo提供了大量精美的主题供我们选择，选择喜欢的主题，在<strong>hexo</strong>目录下的<strong>themes</strong>文件夹下使用git clone下载主题，之后再配置文件_config.yml把theme后面修改成下载的主题的名字，之后运行hexo clean ，hexo g即可看到生效的主题。</p>
<p><img src="/2023/03/03/Service/13.png"></p>
]]></content>
      <tags>
        <tag>从零开始搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title>图片</title>
    <url>/2023/03/02/bolg/</url>
    <content><![CDATA[<p><img src="/2023/03/02/bolg/123.jpg" alt="222"></p>
]]></content>
      <tags>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础学习day01</title>
    <url>/2023/03/03/javafoundationday01/</url>
    <content><![CDATA[<h4 id="1-第一个程序"><a href="#1-第一个程序" class="headerlink" title="1.第一个程序"></a>1.第一个程序</h4><p>​	<strong>输入一个三位数，分别打印输出这个数的个位，十位，百位。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入一个数字:&quot;</span>);</span><br><span class="line">        <span class="comment">//输入一个数字</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="comment">//输入数字的个位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> number%<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> number/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> number/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;个位数字是:&quot;</span>+ge);</span><br><span class="line">        System.out.println(<span class="string">&quot;十位数字是:&quot;</span>+shi);</span><br><span class="line">        System.out.println(<span class="string">&quot;百位数字是:&quot;</span>+bai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.第二个程序</p>
<h5 id="x3D-、-x3D-、-x2F-x3D-、-x3D-、-x3D-等运算符的练习"><a href="#x3D-、-x3D-、-x2F-x3D-、-x3D-、-x3D-等运算符的练习" class="headerlink" title="+&#x3D;、-&#x3D;、&#x2F;&#x3D;、&#x3D;、%&#x3D; 等运算符的练习*"></a><em><em>+&#x3D;、-&#x3D;、&#x2F;&#x3D;、</em>&#x3D;、%&#x3D; 等运算符的练习</em>*</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//+=</span></span><br><span class="line">        <span class="comment">//将左边的数和右边的数相加，在将得到的值赋值给左边</span></span><br><span class="line">        <span class="comment">//细节:</span></span><br><span class="line">        <span class="comment">//+=、-=、/=、*=、%= 底层隐藏了一个强制类型转换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        a+=b;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">//-=</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        c-=d;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        <span class="comment">//*=</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">        e*=f;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">        <span class="comment">// /=</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(g);</span><br><span class="line">        g/=h;</span><br><span class="line">        System.out.println(g);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-第三个程序"><a href="#3-第三个程序" class="headerlink" title="3.第三个程序"></a>3.第三个程序</h4><p>​	<strong>用&#x3D;&#x3D;号判断两遍是否相等</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.==判断左右两遍是否相等</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(a==b);</span><br><span class="line">        System.out.println(a==c);</span><br><span class="line">        System.out.println(c==b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-第四个程序"><a href="#4-第四个程序" class="headerlink" title="4.第四个程序"></a>4.第四个程序</h4><p>​	<strong>与或非运算符的用法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.println(a==b&amp;c&gt;b);</span><br><span class="line">        System.out.println(a==c&amp;c&gt;b);</span><br><span class="line">        System.out.println(a&gt;c|c&gt;b);</span><br><span class="line">        System.out.println(b&gt;c|c&lt;a);</span><br><span class="line">        System.out.println(<span class="literal">false</span>^<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="literal">false</span>^<span class="literal">true</span>);</span><br><span class="line">        System.out.println(!d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-第五个程序"><a href="#5-第五个程序" class="headerlink" title="5.第五个程序"></a>5.第五个程序</h4><p>​	<strong>短路运算符的用法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//短路运算符，先判断左边的条件是否成立，如果成立则继续判断下一个条件，如果不成立，则直接结束。</span></span><br><span class="line">        <span class="comment">//1.&amp;&amp;短路与（先判断第一个条件是否成立）</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>&amp;&amp;<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>&amp;&amp;<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>&amp;&amp;<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//2.||短路或（先判定第一个条件是否成立）</span></span><br><span class="line">        System.out.println(<span class="literal">false</span>||<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="literal">true</span>||<span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="literal">false</span>||<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-第六个程序"><a href="#6-第六个程序" class="headerlink" title="6.第六个程序"></a>6.第六个程序</h4><p>​	<strong>利用三元运算符判断最大值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//利用三元运算符判断最大值</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请在输入一个数&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a &gt; b ? a:b;</span><br><span class="line">        System.out.println(<span class="string">&quot;两个数的最大值是:&quot;</span>+max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-第七个程序"><a href="#7-第七个程序" class="headerlink" title="7.第七个程序"></a>7.第七个程序</h4><p>​	<strong>利用三元运算符判断两只老虎的体重是否相同</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个老虎的体重&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">tiger</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个老虎的体重&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">tiger1</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"><span class="comment">//        System.out.println(tiger==tiger1);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tiger2</span> <span class="operator">=</span> tiger==tiger1?<span class="string">&quot;相同&quot;</span>:<span class="string">&quot;不同&quot;</span>;</span><br><span class="line">        System.out.println(tiger2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-第八个程序"><a href="#8-第八个程序" class="headerlink" title="8.第八个程序"></a>8.第八个程序</h4><p>​	<strong>利用三元运算符的嵌套判断三个和尚中最高的</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//三个和尚分别高 150、210、165</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">150</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">210</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">165</span>;</span><br><span class="line">        System.out.println(a&gt;b?(a&gt;c?a:c):(b&gt;c?b:c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="两个课后作业："><a href="#两个课后作业：" class="headerlink" title="两个课后作业："></a>两个课后作业：</h2><h4 id="1-第一个作业"><a href="#1-第一个作业" class="headerlink" title="1.第一个作业"></a>1.第一个作业</h4><h5 id="输入男士和女士衣服的时髦度，如果男士大于女士的则打印相亲成功，否则相亲失败"><a href="#输入男士和女士衣服的时髦度，如果男士大于女士的则打印相亲成功，否则相亲失败" class="headerlink" title="输入男士和女士衣服的时髦度，如果男士大于女士的则打印相亲成功，否则相亲失败"></a><strong>输入男士和女士衣服的时髦度，如果男士大于女士的则打印相亲成功，否则相亲失败</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入男士衣服的时髦度&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">boy</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入女士的衣服时髦度&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">gril</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (boy&gt;gril)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;相亲成功!!!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;相亲失败!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-第二个作业"><a href="#2-第二个作业" class="headerlink" title="2.第二个作业"></a>2.第二个作业</h4><p>​	<strong>输入一个数字，判断这个数字是否等于6或者相加可以让6整除的返回true，否则返回false</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个数字:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;请在输入一个数字&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number1</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(number==<span class="number">6</span>||number1==<span class="number">6</span>||(number+number1)%<span class="number">6</span>==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java基础第一天</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础学习day02</title>
    <url>/2023/03/03/javafoundationday02/</url>
    <content><![CDATA[<h4 id="1-数组的小练习"><a href="#1-数组的小练习" class="headerlink" title="1.数组的小练习"></a>1.数组的小练习</h4><p>​	<strong>java中新建数组的语法</strong></p>
<p>​	<strong>int [] arr &#x3D; {1,2,3,4,5}	(数组的静态初始化)</strong></p>
<p>​	<strong>int [] arr &#x3D; new int [10]	(数组的动态初始化)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//存储四个数字,并打印</span></span><br><span class="line">        <span class="type">int</span> [] array =<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;array.length ; i++) &#123;</span><br><span class="line">            System.out.println(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存数五个学生的年龄,并打印</span></span><br><span class="line">        <span class="type">int</span> [] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">12</span>,<span class="number">15</span>,<span class="number">18</span>,<span class="number">21</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;array1.length ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个学生的年龄是:&quot;</span>+array1[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存放四个学生的身高，并打印</span></span><br><span class="line">        <span class="type">int</span> [] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">187</span>,<span class="number">164</span>,<span class="number">159</span>,<span class="number">186</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;array2.length ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个学生的身高是:&quot;</span>+array2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-抽象方法"><a href="#2-抽象方法" class="headerlink" title="2.抽象方法"></a>2.抽象方法</h4><h5 id="抽象方法的特点："><a href="#抽象方法的特点：" class="headerlink" title="抽象方法的特点："></a>抽象方法的特点：</h5><p><strong>特点1：没有方法体，以封号结尾</strong></p>
<p><strong>特点2：前面修饰符列表中有abstract关键字</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/**抽象方法</span></span><br><span class="line"><span class="comment">        public abstract void doSome();</span></span><br><span class="line"><span class="comment">       特点1：没有方法体，以封号结尾</span></span><br><span class="line"><span class="comment">       特点2：前面修饰符列表中有abstract关键字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        抽象类中不一定有抽象方法</span></span><br><span class="line"><span class="comment">        但抽象方法必须出现在抽象类中</span></span><br><span class="line"><span class="comment">        抽象类的子类可以是抽象类，也可以是非抽象类</span></span><br><span class="line"><span class="comment">        抽象类无法实例化，但抽象类有构造方法。这个构造</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        一个非抽象类继承抽象类，必须将抽象类中的抽象方法实现。</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">       <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Account</span>&#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-接口"><a href="#3-接口" class="headerlink" title="3.接口"></a>3.接口</h4><p><strong>1.接口也是一种引用数据类型<br>2.接口是完全抽象的。（抽象类是半抽象），或者可以说接口是特殊的抽象类<br>3.接口怎么定义，语法是什么？					public interface 接口名{}<br>4.接口编译之后也是一个字节码文件.class<br>5.接口支持多继承，一个接口允许继承多个接口<br>6.接口中只包含两部分内容，一部分是：常量。一部分是：抽象方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            接口：</span></span><br><span class="line"><span class="comment">                1.接口也是一种引用数据类型</span></span><br><span class="line"><span class="comment">                2.接口是完全抽象的。（抽象类是半抽象），或者可以说接口是特殊的抽象类</span></span><br><span class="line"><span class="comment">                3.接口怎么定义，语法是什么？</span></span><br><span class="line"><span class="comment">                public interface 接口名&#123;&#125;</span></span><br><span class="line"><span class="comment">                4.接口编译之后也是一个字节码文件.class</span></span><br><span class="line"><span class="comment">                5.接口支持多继承，一个接口允许继承多个接口</span></span><br><span class="line"><span class="comment">                6.接口中只包含两部分内容，一部分是：常量。一部分是：抽象方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//定义一个接口</span></span><br><span class="line">        <span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义一个接口</span></span><br><span class="line">        <span class="keyword">interface</span> <span class="title class_">B</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//接口支持多继承</span></span><br><span class="line">        <span class="keyword">interface</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>,B&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-访问修饰符"><a href="#4-访问修饰符" class="headerlink" title="4.访问修饰符"></a>4.访问修饰符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问控制权限有4种</span></span><br><span class="line"><span class="comment">     * 1.private    私有的     表示私有的，只能在本类中访问</span></span><br><span class="line"><span class="comment">     * 2.protected  受保护的    表示只能在本类、同包、子类中访问</span></span><br><span class="line"><span class="comment">     * 3.public     公开的     表示公开的，在任何位置都可以访问</span></span><br><span class="line"><span class="comment">     * 4            默认的     默认只能在本类或者同包下访问</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 访问控制修饰符          本类      同包      子类      任意位置</span></span><br><span class="line"><span class="comment">     * -------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">     * public                可以      可以       可以       可以</span></span><br><span class="line"><span class="comment">     * private               可以      不行       不行       不行</span></span><br><span class="line"><span class="comment">     * protecte              可以      可以       可以       不行</span></span><br><span class="line"><span class="comment">     * 默认                   可以      可以       不行       不行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-重写toString方法"><a href="#5-重写toString方法" class="headerlink" title="5.重写toString方法"></a>5.重写toString方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyTime myTime;</span><br><span class="line">        myTime = <span class="keyword">new</span> <span class="title class_">MyTime</span>(<span class="number">2002</span>,<span class="number">04</span>,<span class="number">06</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span>  myTime.toString();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyTime</span> &#123;</span><br><span class="line">        <span class="type">int</span> year;</span><br><span class="line">        <span class="type">int</span> month;</span><br><span class="line">        <span class="type">int</span> day;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MyTime</span><span class="params">()</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyTime</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.year = year;</span><br><span class="line">            <span class="built_in">this</span>.month = month;</span><br><span class="line">            <span class="built_in">this</span>.day = day;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.year+<span class="string">&quot;年&quot;</span>+<span class="built_in">this</span>.month+<span class="string">&quot;月&quot;</span>+<span class="built_in">this</span>.day+<span class="string">&quot;日&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-equals方法的底层代码"><a href="#6-equals方法的底层代码" class="headerlink" title="6.equals方法的底层代码"></a>6.equals方法的底层代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.equals方法的源代码       equals方法使用&quot;==&quot;号来判断  要重写Object中的 equals方法</span></span><br><span class="line"><span class="comment">         * public boolean equals(Object obj)&#123;</span></span><br><span class="line"><span class="comment">         *  return (this == obj);</span></span><br><span class="line"><span class="comment">         *  &#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  equals的作用</span></span><br><span class="line"><span class="comment">         *  判断两个对象是否相等</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断两个基本数据类型的数据是否相等使用&quot;==&quot;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        System.out.println(a==b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断两个对象时，使用equals方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-匿名内部类"><a href="#7-匿名内部类" class="headerlink" title="7.匿名内部类"></a>7.匿名内部类</h4><p><strong>1.什么是内部类</strong><br>      <strong>内部类：在类的内部又定义一个新的类，被称为内部类</strong><br><strong>2.内部类的分类</strong><br>       <strong>静态内部类：类似于静态变量</strong><br>       <strong>实例内部类：类似于实例变量</strong><br>       <strong>局部内部类：类似于局部变量</strong>** </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 匿名内部类：</span></span><br><span class="line"><span class="comment">         *  1.什么是内部类</span></span><br><span class="line"><span class="comment">         *  内部类：在类的内部又定义一个新的类，被称为内部类</span></span><br><span class="line"><span class="comment">         *  2.内部类的分类</span></span><br><span class="line"><span class="comment">         *      静态内部类：类似于静态变量</span></span><br><span class="line"><span class="comment">         *      实例内部类：类似于实例变量</span></span><br><span class="line"><span class="comment">         *      局部内部类：类似于局部变量</span></span><br><span class="line"><span class="comment">         *  3.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Test01</span>&#123;</span><br><span class="line">            <span class="comment">//静态内部类</span></span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner1</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//实例内部类</span></span><br><span class="line">            <span class="keyword">class</span> <span class="title class_">Inner2</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="comment">//局部内部类     匿名内部类</span></span><br><span class="line">                <span class="keyword">class</span> <span class="title class_">Inner3</span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java基础学习第二天</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础学习day03</title>
    <url>/2023/03/03/javafoundationday03/</url>
    <content><![CDATA[<h4 id="1-匿名内部类："><a href="#1-匿名内部类：" class="headerlink" title="1.匿名内部类："></a>1.匿名内部类：</h4><p><strong>可以直接实现接口，但没有名字复用性差，代码可读性差，不建议这样写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyMath</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyMath</span>();</span><br><span class="line">        m.mySum(<span class="keyword">new</span> <span class="title class_">Compute</span>() &#123; <span class="comment">//匿名内部类     </span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> x+y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">200</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Compute</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyMath</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mySum</span><span class="params">(Compute c,<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">retValue</span> <span class="operator">=</span> c.sum(x,y);</span><br><span class="line">            System.out.println(x+<span class="string">&quot;+&quot;</span>+y+<span class="string">&quot;=&quot;</span>+retValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-数组扩容"><a href="#2-数组扩容" class="headerlink" title="2.数组扩容"></a>2.数组扩容</h4><p><strong>java中的数组扩容，要先创建一个大数组，在将原数组的数据拷贝过去</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="comment">//数组扩容，先创建一个大数组，在将原数组的数据拷贝过去</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//数组拷贝</span></span><br><span class="line"><span class="comment">//        System.arraycopy(5个参数);</span></span><br><span class="line">        <span class="comment">//拷贝源（从这个数组中进行拷贝）</span></span><br><span class="line">        <span class="type">int</span> [] src = &#123;<span class="number">1</span>,<span class="number">11</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拷贝目标数组</span></span><br><span class="line">        <span class="type">int</span> [] dest = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">20</span>];<span class="comment">//动态初始化长度为20的数组</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用jdk中System.arraycopy()的方法</span></span><br><span class="line">        System.arraycopy(src,<span class="number">0</span>,dest,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;dest.length ; i++) &#123;</span><br><span class="line">            System.out.print(dest[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-Arrays工具类"><a href="#3-Arrays工具类" class="headerlink" title="3.Arrays工具类"></a>3.Arrays工具类</h4><p><strong>Arrays是一个工具类。</strong></p>
<p><strong>在java.util.Arrays包下</strong></p>
<p><strong>其中有一个sort方法，可以排序。静态方法，直接使用类名调用就行</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//java.util.Arrays</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Arrays是一个工具类。</span></span><br><span class="line"><span class="comment">         * 其中有一个sort方法，可以排序。静态方法，直接使用类名调用就行</span></span><br><span class="line"><span class="comment">         * 工具类当中的方法，大部分都是静态的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> [] arr = &#123;<span class="number">5</span>,<span class="number">65</span>,<span class="number">26</span>,<span class="number">35</span>,<span class="number">15</span>,<span class="number">355</span>,<span class="number">662</span>,<span class="number">51</span>,<span class="number">121</span>,<span class="number">0</span>,<span class="number">23</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;arr.length ; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-Arrays-binarySearch方法"><a href="#4-Arrays-binarySearch方法" class="headerlink" title="4.Arrays.binarySearch方法"></a>4.Arrays.binarySearch方法</h4><p><strong>此方法是在数组中判断是否有相同的值，有则返回该元素下标，没有则返回-1</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//java.util.Arrays     工具类中有哪些方法，参考帮助文档</span></span><br><span class="line">        <span class="type">int</span> [] arr = &#123;<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr, <span class="number">32</span>);</span><br><span class="line">        System.out.println(index==-<span class="number">1</span> ? <span class="string">&quot;该元素不存在&quot;</span>:<span class="string">&quot;该元素下标是:&quot;</span>+index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-了解java的异常"><a href="#5-了解java的异常" class="headerlink" title="5.了解java的异常"></a>5.了解java的异常</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.什么是异常，java提供异常机制有什么用处？</span></span><br><span class="line"><span class="comment">    以下程序执行过程中发生了不正常的情况,而这种不正常的情况叫做：异常</span></span><br><span class="line"><span class="comment">    java语言是很完美的语言，提供了异常处理的方式，以下程序执行过程中出现了不正常的情况</span></span><br><span class="line"><span class="comment">    java把该异常信息打印输出到控制台，供程序员参考。</span></span><br><span class="line"><span class="comment">    2.以下程序执行控制台出现了：</span></span><br><span class="line"><span class="comment">                异常</span></span><br><span class="line"><span class="comment">    这个信息我们称为异常信息，这个信息是JVM打印的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//实际上JVM执行到此处的时候，会new异常对象：new ArithmeticException(&quot;/ by zero&quot;);</span></span><br><span class="line">        <span class="comment">//并且在JVM将new的异常对象抛出，打印输出信息到控制台了。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a/b;</span><br><span class="line">        System.out.println(a+<span class="string">&quot;/&quot;</span>+b+<span class="string">&quot;=&quot;</span>+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-通过异常类去实例化异常对象"><a href="#6-通过异常类去实例化异常对象" class="headerlink" title="6.通过异常类去实例化异常对象"></a>6.通过异常类去实例化异常对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//通过异常类去实例化异常对象</span></span><br><span class="line">        <span class="type">NumberFormatException</span> <span class="variable">nfe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumberFormatException</span>(<span class="string">&quot;数字格式化异常！！！&quot;</span>);</span><br><span class="line">        System.out.println(nfe);</span><br><span class="line">        <span class="type">NullPointerException</span> <span class="variable">npe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;空指针异常发生了！！！&quot;</span>);</span><br><span class="line">        System.out.println(npe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      <tags>
        <tag>java基础学习第三天</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础学习day04</title>
    <url>/2023/03/03/javafoundationday04/</url>
    <content><![CDATA[<h4 id="1-try…catch异常处理"><a href="#1-try…catch异常处理" class="headerlink" title="1.try…catch异常处理"></a>1.try…catch异常处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    try....catch</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\20计科2班\\数据结构实验\\排序实验\\sort.c&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;以上出现异常，这里无法执行。。。&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件已损坏或文件丢失&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-异常对象常用的两个方法"><a href="#2-异常对象常用的两个方法" class="headerlink" title="2.异常对象常用的两个方法"></a>2.异常对象常用的两个方法</h4><p><strong>exception.getMessage();</strong></p>
<p><strong>exception.printStackTrace();</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    异常对象有两个非常重要的方法：</span></span><br><span class="line"><span class="comment">    获取简单异常的描述信息</span></span><br><span class="line"><span class="comment">   exception.getMessage();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   打印异常追踪的堆栈信息：</span></span><br><span class="line"><span class="comment">   exception.printStackTrace();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NullPointerException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">        <span class="comment">//获取异常的信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        System.out.println(message);</span><br><span class="line">        <span class="comment">//打印异常信息</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-FileNotFoundException异常"><a href="#3-FileNotFoundException异常" class="headerlink" title="3.FileNotFoundException异常"></a>3.FileNotFoundException异常</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里程序不耽误执行，很健壮。《服务器不会因为遇到异常而宕机》</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">     m3();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">//此处文件路径不对</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\20计科2班\\操作系统实验\\chazhao.c&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-finally子句"><a href="#4-finally子句" class="headerlink" title="4.finally子句"></a>4.finally子句</h4><p><strong>1.在finally子句中的代码是最后执行的，并且一定会执行的，即使try语句块中的代码出现了异常。finally子句必须和try一起出现不能单编写</strong><br><strong>2.finally语句块中的代码出现异常，finally中代码也会正常执行。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    关于try...catch的finally子句：</span></span><br><span class="line"><span class="comment">    1.在finally子句中的代码是最后执行的，并且一定会执行的，即使try语句块中的代码出现了异常。</span></span><br><span class="line"><span class="comment">    finally子句必须和try一起出现不能单编写</span></span><br><span class="line"><span class="comment">    2.finally语句块中的代码出现异常，finally中代码也会正常执行。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\20计科2班\\操作系统实验\\二分查找\\chazhao.c&quot;</span>);</span><br><span class="line">            <span class="comment">//这里一定会出现空指针异常</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            s.toString();</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello，浩克&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-java面试题"><a href="#5-java面试题" class="headerlink" title="5.java面试题"></a>5.java面试题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> m();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    java语法规则（有一些规则是不能破坏的，一旦这么说了，就必须这么做！）：</span></span><br><span class="line"><span class="comment">        java中 有一条这样的规则：</span></span><br><span class="line"><span class="comment">            方法体中的代码必须遵循自上而下的顺序一次逐行执行（亘古不变的语法！）</span></span><br><span class="line"><span class="comment">        java中还有一条规则：</span></span><br><span class="line"><span class="comment">            return语句一旦执行，整个方法必须结束（亘古不变的语法！！！）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">m</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java基础学习第四天</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础学day05</title>
    <url>/2023/03/03/javafoundationday05/</url>
    <content><![CDATA[<h4 id="1-如何自定义一个异常类"><a href="#1-如何自定义一个异常类" class="headerlink" title="1.如何自定义一个异常类"></a>1.如何自定义一个异常类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.sun公司提供的JDK内置的异常肯定是不够用的，在实际开发当中，有很多的业务，</span></span><br><span class="line"><span class="comment">这些业务出现异常之后，JDK中都是没有的。和业务挂钩的。那么异常类我们程序员可以自己定义吗</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.java中我怎么定义异常呢？</span></span><br><span class="line"><span class="comment">    两步：</span></span><br><span class="line"><span class="comment">        第一步：编写一个类继承Exception或者RuntimeException.</span></span><br><span class="line"><span class="comment">        第二步：提供两个构造方法，一个无参数的，一个带有String参数的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span>&#123;<span class="comment">//编译时异常</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String s)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/* public class MyException extends RuntimeException&#123; //运行时异常</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-如何用自定义的异常类"><a href="#2-如何用自定义的异常类" class="headerlink" title="2.如何用自定义的异常类"></a>2.如何用自定义的异常类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        类在强制类型转换中，如果是类型转换成接口类型。</span></span><br><span class="line"><span class="comment">        那么类和接口之间不需要从在继承关系，也可以转换</span></span><br><span class="line"><span class="comment">        java语法中允许。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建异常对象（只创建了异常信息，并没有抛出）</span></span><br><span class="line">        Demo1.<span class="type">MyException</span> <span class="variable">myException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo1</span>.MyException(<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">        <span class="comment">//打印异常堆栈信息</span></span><br><span class="line">        myException.printStackTrace();</span><br><span class="line">        <span class="comment">//获取异常简单描述信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> myException.getMessage();</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-重写之后的方法不能比重写之前的方法抛出更多的异常，可以更少"><a href="#3-重写之后的方法不能比重写之前的方法抛出更多的异常，可以更少" class="headerlink" title="3.重写之后的方法不能比重写之前的方法抛出更多的异常，可以更少"></a>3.重写之后的方法不能比重写之前的方法抛出更多的异常，可以更少</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">重写之后的方法不能比重写之前的方法抛出更多的异常，可以更少</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//编译正常</span></span><br><span class="line">   <span class="comment">/* public void doSome() throws RuntimeException&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    编译报错</span></span><br><span class="line">    <span class="comment">/*public void doSome() throws Exception&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//编译正常</span></span><br><span class="line">    <span class="comment">/*public void doOther()&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">//编译正常</span></span><br><span class="line">    <span class="comment">/*public void doOther() throws Exception&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">   <span class="comment">//编译正常</span></span><br><span class="line">   <span class="comment">/* public void doOther() throws NullPointerException &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-集合"><a href="#4-集合" class="headerlink" title="4.集合"></a>4.集合</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.集合概述</span></span><br><span class="line"><span class="comment"> *      1.1什么是集合？有什么用？</span></span><br><span class="line"><span class="comment"> *          数组其实就是一个集合。集合实际上就是一个容器。可以用来容纳其它类型的数据。</span></span><br><span class="line"><span class="comment"> *          集合为什么说是在开发中使用较多。</span></span><br><span class="line"><span class="comment"> *              集合是一个容器，是可以一次容纳多个对象</span></span><br><span class="line"><span class="comment"> *              在实际开发中，假设连接数据库，数据库中有10条记录，</span></span><br><span class="line"><span class="comment"> *              那么假设把这10条记录查询出来，然后将10个java对象放到某一个，</span></span><br><span class="line"><span class="comment"> *              集合当中，将集合传到前端，然后遍历集合，将一个数据一个数据展示出来。</span></span><br><span class="line"><span class="comment"> *       1.2集合不能直接存储基本数据类型，另外集合也不能直接存储java对象，</span></span><br><span class="line"><span class="comment"> *       集合当中存储的都是java对象的内存地址。（或者说集合中存储的是引用）</span></span><br><span class="line"><span class="comment"> *       list.add(100);</span></span><br><span class="line"><span class="comment"> *       注意：</span></span><br><span class="line"><span class="comment"> *          集合在java中本身是一个容器，是一个对象。</span></span><br><span class="line"><span class="comment"> *          集合中任何时候存储的都是“引用”</span></span><br><span class="line"><span class="comment"> *       1.3在java中每一个不同的集合，底层会对应不同的数据结构。往不同的集合中存储元素，等于将数据放到了不同的数据结构当中。</span></span><br><span class="line"><span class="comment"> *       什么是数据结构？数据存储的结构就是数据结构。不同的数据结构，数据存储的方式不同。例如：</span></span><br><span class="line"><span class="comment"> *       数组  二叉树  链表  哈希表...</span></span><br><span class="line"><span class="comment"> *       以上这些都是常见的数据结构。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *       往集合c1中放数据，可能是放到数组上了</span></span><br><span class="line"><span class="comment"> *       往集合c2中放数据，可能是放到二叉树上了</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *       使用不同的集合等于使用了不同的数据结构</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *       java中不需要精通数据结构。java中已经将数据结构实现，已经写好了这些常用的集合类</span></span><br><span class="line"><span class="comment"> *       在什么情况下使用什么数据结构。</span></span><br><span class="line"><span class="comment"> *       new ArrayList();创建一个集合，底层是数组</span></span><br><span class="line"><span class="comment"> *       new LinkedList();创建一个集合，底层是链表</span></span><br><span class="line"><span class="comment"> *       new  TreeSet();创建i一个集合，底层是二叉树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *       1.4、集合在JDK的那个包下？</span></span><br><span class="line"><span class="comment"> *          java.util.*;</span></span><br><span class="line"><span class="comment"> *          所有的集合类和集合接口都在java.util包下;</span></span><br><span class="line"><span class="comment"> *       总结（所有的实现类）：</span></span><br><span class="line"><span class="comment"> *       ArrayList:底层数据结构是数组</span></span><br><span class="line"><span class="comment"> *       LinkedList:底层数据结构是双向链表</span></span><br><span class="line"><span class="comment"> *       Vector:底层数据结构是数组，线程安全的，效率较低，使用较少</span></span><br><span class="line"><span class="comment"> *       HashMap:底层数据结构是哈希表</span></span><br><span class="line"><span class="comment"> *       HashSet:底层数据结构是HashMap,放到HashSet集合中的元素等同于放到HashMap集合Key部分了</span></span><br><span class="line"><span class="comment"> *       Hashtable:底层数据结构是哈希表，是线程安全的，效率较低，使用较少</span></span><br><span class="line"><span class="comment"> *       Properties:是线程安全的，并且key和vaule是String类型的</span></span><br><span class="line"><span class="comment"> *       TreeSet:底层数据结构是TreeMap,放到TreeSet集合中的元素等同于放到TreeMap集合Key部分了。</span></span><br><span class="line"><span class="comment"> *       TreeMap:底层是二叉树数据结构。TreeMap集合的key可以按照大小排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    List 集合存储元素的特点：</span></span><br><span class="line"><span class="comment">        有序可重复</span></span><br><span class="line"><span class="comment">        有序：存进去的顺序和取出来的顺序是相同的，元素有下标</span></span><br><span class="line"><span class="comment">        可重复：存进去1，还可以存1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Set集合存储元素的特点：</span></span><br><span class="line"><span class="comment">        无序不可重复</span></span><br><span class="line"><span class="comment">        无序：存进去的顺序和取出来的顺序不一定相同。另为Set集合中元素没有下标。</span></span><br><span class="line"><span class="comment">        不可重复：存进去1，不能在存1。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    SortedSet集合存储元素的特点：</span></span><br><span class="line"><span class="comment">        首先是无序不可重复的，但是SortedSet集合中的元素是可排序的。</span></span><br><span class="line"><span class="comment">        无序：存进去和取出来的顺序不一定相同。另外Set集合中元素没有下标</span></span><br><span class="line"><span class="comment">        不可重复：存进去1，不能再存储1；</span></span><br><span class="line"><span class="comment">        可排序：可以按照大小排序；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Map集合的Key，就是一个Set集合。</span></span><br><span class="line"><span class="comment">        往Set集合中放数据，实际上放到了Map集合的Key部分。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="两个课后作业："><a href="#两个课后作业：" class="headerlink" title="两个课后作业："></a>两个课后作业：</h2><h4 id="第一题："><a href="#第一题：" class="headerlink" title="第一题："></a>第一题：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入用户名（要求大于6位，小于14位）：&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.register(username,password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (HomeWork1.MyException e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String username,String password)</span> <span class="keyword">throws</span> HomeWork1.MyException &#123;</span><br><span class="line">            <span class="keyword">if</span> (username.length()&gt;<span class="number">6</span>&amp;&amp;username.length()&lt;<span class="number">14</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;用户注册成功!&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (username.length()&lt;<span class="number">6</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HomeWork1</span>.MyException(<span class="string">&quot;用户名小于6位，注册失败！！！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (username.length()&gt;<span class="number">14</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HomeWork1</span>.MyException(<span class="string">&quot;用户名大于14位，注册失败！！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二题："><a href="#第二题：" class="headerlink" title="第二题："></a>第二题：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">        <span class="keyword">public</span>  <span class="title function_">MyException</span><span class="params">()</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span>  <span class="title function_">MyException</span><span class="params">(String a)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java基础学习第五天</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础学习day06</title>
    <url>/2023/03/03/javafoundationday06/</url>
    <content><![CDATA[<h4 id="1-关于java-util-Collection接口中常用的方法"><a href="#1-关于java-util-Collection接口中常用的方法" class="headerlink" title="1.关于java.util.Collection接口中常用的方法"></a>1.关于java.util.Collection接口中常用的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    关于java.util.Collection接口中常用的方法</span></span><br><span class="line"><span class="comment">    boolean add(Object e)   添加元素</span></span><br><span class="line"><span class="comment">    int size()      获取元素个数</span></span><br><span class="line"><span class="comment">    void clear()    清空集合</span></span><br><span class="line"><span class="comment">    boolean contains(Object o)  判断当前集合中是否包含元素o</span></span><br><span class="line"><span class="comment">    boolean remove(Object o)    删除集合中的某个元素</span></span><br><span class="line"><span class="comment">    boolean isEmpty()           判断集合是否为空</span></span><br><span class="line"><span class="comment">    Object[] toArray()  调用这个方法可以把集合转换成数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//测试方法</span></span><br><span class="line">        collection.add(<span class="number">1200</span>);<span class="comment">//自动装箱,实际上是放进去了一个对象的内存地址。</span></span><br><span class="line">        collection.add(<span class="number">3.1415926535</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">        collection.add(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的元素个数是:&quot;</span>+collection.size());</span><br><span class="line">        collection.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的元素个数是:&quot;</span>+collection.size());</span><br><span class="line"></span><br><span class="line">        collection.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;浩克&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;绿巨人&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> collection.contains(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">remove</span> <span class="operator">=</span> collection.remove(<span class="string">&quot;绿巨人&quot;</span>);</span><br><span class="line">        System.out.println(remove);</span><br><span class="line">        System.out.println(collection.size());</span><br><span class="line">        System.out.println(collection.isEmpty());</span><br><span class="line"></span><br><span class="line">        collection.add(<span class="string">&quot;520&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;120&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;130&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;150&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合转成数组</span></span><br><span class="line"></span><br><span class="line">        Object[] objects = collection.toArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">            System.out.println(objects[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-集合的迭代器"><a href="#2-集合的迭代器" class="headerlink" title="2.集合的迭代器"></a>2.集合的迭代器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    集合迭代器   集合遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 注意以下的遍历方式、迭代方式，是所有Collection通用的一种方式。</span></span><br><span class="line">        <span class="comment">//在Map集合中不能用，在所有的Collection以及子类中使用。</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        collection.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;132&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;580&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;a250&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;abc5656&quot;</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对集合遍历、迭代</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一步：获取集合对象的迭代器对象</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">        <span class="comment">//第二步：通过以上获取的迭代器对象开始遍历集合</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        boolean hasNext()   如果迭代具有更多元素，则返回 true 。</span></span><br><span class="line"><span class="comment">        Object next()    返回迭代中的下一个元素。</span></span><br><span class="line"><span class="comment">        default void remove()   从底层集合中删除此迭代器返回的最后一个元素（可选操作）。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-java如何获取到迭代器"><a href="#3-java如何获取到迭代器" class="headerlink" title="3.java如何获取到迭代器"></a>3.java如何获取到迭代器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        collection.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;520llo&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;123lo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取对象的迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//HashSet 无序    并且不可重复</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        collection1.add(<span class="number">123</span>);</span><br><span class="line">        collection1.add(<span class="number">321</span>);</span><br><span class="line">        collection1.add(<span class="number">100</span>);</span><br><span class="line">        collection1.add(<span class="number">200</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> collection1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java基础学习第六天</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础学习day07</title>
    <url>/2023/03/03/javafoundationday07/</url>
    <content><![CDATA[<h4 id="1-集合迭代器使用小技巧"><a href="#1-集合迭代器使用小技巧" class="headerlink" title="1.集合迭代器使用小技巧"></a>1.集合迭代器使用小技巧</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        使用迭代器的时候不能用remove方法，会改变集合的结构</span></span><br><span class="line"><span class="comment">        会报错</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        collection.add(<span class="number">1230</span>);</span><br><span class="line">        collection.add(<span class="number">2030</span>);</span><br><span class="line">        collection.add(<span class="number">1530</span>);</span><br><span class="line">        collection.add(<span class="number">1230</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line"><span class="comment">//        collection.remove(1230);</span></span><br><span class="line">        <span class="comment">//可以用迭代器的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除的一定是迭代器指向的当前元素</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">            iterator.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(collection.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-List集合方法中的接口"><a href="#2-List集合方法中的接口" class="headerlink" title="2.List集合方法中的接口"></a>2.List集合方法中的接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试List方法接口中的常用方法</span></span><br><span class="line"><span class="comment">    1.List集合存储元素特点</span></span><br><span class="line"><span class="comment">        有序可重复：List集合元素有下标</span></span><br><span class="line"><span class="comment">        从0开始以1递增</span></span><br><span class="line"><span class="comment">    2.List接口中特有的方法</span></span><br><span class="line"><span class="comment">    void add(int index, E element) 将指定的元素插入此列表中的指定位置</span></span><br><span class="line"><span class="comment">    Object get(int index)  返回此列表中指定位置的元素。</span></span><br><span class="line"><span class="comment">    int indexOf(Object o)  返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。</span></span><br><span class="line"><span class="comment">    int lastIndexOf(Object o)   返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。</span></span><br><span class="line"><span class="comment">    Object remove(int index)   删除该列表中指定位置的元素</span></span><br><span class="line"><span class="comment">    E set(int index, E element) 用指定的元素（可选操作）替换此列表中指定位置的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java基础学习第七天</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础学习day08</title>
    <url>/2023/03/03/javafoundationday08/</url>
    <content><![CDATA[<h4 id="1-如何将线程不安全的ArrayList集合转为线程安全的"><a href="#1-如何将线程不安全的ArrayList集合转为线程安全的" class="headerlink" title="1.如何将线程不安全的ArrayList集合转为线程安全的"></a>1.如何将线程不安全的ArrayList集合转为线程安全的</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Vector:</span></span><br><span class="line"><span class="comment">        1.底层也是一个数组</span></span><br><span class="line"><span class="comment">        2.初始化容量：10</span></span><br><span class="line"><span class="comment">        3.扩容之后是原来容量的2倍</span></span><br><span class="line"><span class="comment">        4.ArrayList集合扩容是原来的1.5倍</span></span><br><span class="line"><span class="comment">        5.Vector中所有的方法都是线程同步的，都带有synchronized关键字，是线程安全的。效率较低，较少使用。</span></span><br><span class="line"><span class="comment">        6.怎么将一个线程不安全的ArrayList集合转换成线程安全的呢？</span></span><br><span class="line"><span class="comment">            java.util.Collections</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            java.util.Collection是接口</span></span><br><span class="line"><span class="comment">            java.util.Collections</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        6.怎么将一个线程不安全的ArrayList集合转换成线程安全的呢？</span></span><br><span class="line"><span class="comment">            java.util.Collections</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            java.util.Collection是接口</span></span><br><span class="line"><span class="comment">            java.util.Collections</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();<span class="comment">//非线程安全</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//变为线程安全的</span></span><br><span class="line">        Collections.synchronizedList(list);</span><br><span class="line"></span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">153</span>);</span><br><span class="line">        list.add(<span class="number">321</span>);</span><br><span class="line">        list.add(<span class="number">852</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-泛型机制"><a href="#2-泛型机制" class="headerlink" title="2.泛型机制"></a>2.泛型机制</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用JDK5之后的泛型机制</span></span><br><span class="line"><span class="comment">    泛型这种语法机制，只在程序编译阶段起作用，只是给编译器参考的。</span></span><br><span class="line"><span class="comment">    使用泛型机制的好处是什么？</span></span><br><span class="line"><span class="comment">        第一：集合中存储的元素类型统一。</span></span><br><span class="line"><span class="comment">        第二：从集合中取出来的元素类型是泛型指定的类型，不需要进行大量的&quot;向下转型&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    泛型机制的缺点是什么？</span></span><br><span class="line"><span class="comment">        导致集合中存储的元素缺乏多样性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">        <span class="comment">//使用泛型机制List&lt;Animal&gt;之后，表示List集合中只允许存储Animal类型的数据。</span></span><br><span class="line">        List&lt;Animal&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Animal&gt;();</span><br><span class="line">        <span class="comment">//存储其他类型的数据就会编译报错</span></span><br><span class="line">        list.add(cat);</span><br><span class="line">        list.add(bird);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Animal&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"><span class="comment">//            animal.move();</span></span><br><span class="line">            <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">                <span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> (Cat) animal;</span><br><span class="line">                cat1.catchMouse();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Bird)&#123;</span><br><span class="line">                <span class="type">Bird</span> <span class="variable">bird1</span> <span class="operator">=</span> (Bird) animal;</span><br><span class="line">                bird1.fly();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;动物在移动！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;猫抓老鼠!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;鸟儿在飞翔！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-自动类型推断、钻石表达式"><a href="#3-自动类型推断、钻石表达式" class="headerlink" title="3.自动类型推断、钻石表达式"></a>3.自动类型推断、钻石表达式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    自动类型推断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//自动类型判断，前提是JDK8之后才可以。</span></span><br><span class="line">        <span class="comment">//钻石表达式</span></span><br><span class="line">        List&lt;Demo2.Animal&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Demo2</span>.Animal());</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Demo2</span>.Cat());</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Demo2</span>.Bird());</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Demo2.Animal&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Demo2.<span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            animal.move();</span><br><span class="line">            System.out.println(animal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-如何自定义泛型"><a href="#4-如何自定义泛型" class="headerlink" title="4.如何自定义泛型"></a>4.如何自定义泛型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  可以自定义泛型吗？</span></span><br><span class="line"><span class="comment">  可以的哦，亲；</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &lt;admin&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">(admin admin)</span>&#123;</span><br><span class="line">        System.out.println(admin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Demo4 &lt;String&gt; demo4 = <span class="keyword">new</span> <span class="title class_">Demo4</span>&lt;&gt;();</span><br><span class="line">        demo4.doSome(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        Demo4 &lt;Integer&gt; demo41 = <span class="keyword">new</span> <span class="title class_">Demo4</span>&lt;&gt;();</span><br><span class="line">        demo41.doSome(<span class="number">123</span>);</span><br><span class="line">        MyIterator &lt;String&gt; myIterator = <span class="keyword">new</span> <span class="title class_">MyIterator</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> myIterator.get();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyIterator</span> &lt;T&gt;&#123;</span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-增强for循环foreach"><a href="#5-增强for循环foreach" class="headerlink" title="5.增强for循环foreach"></a>5.增强for循环foreach</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    JDk5.0之后推出了一个新特性，叫做增强for循环，或者叫做foreach</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//int类型数据</span></span><br><span class="line">        <span class="type">int</span> [] arr = &#123;<span class="number">434</span>,<span class="number">56</span>,<span class="number">25</span>,<span class="number">16</span>,<span class="number">353</span>,<span class="number">25</span>&#125;;</span><br><span class="line">        <span class="comment">//遍历数组(普通for循环)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length ; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增强for循环(foreach)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        for (元素类型 变量名: 数组或集合) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(变量名);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//        foreach没有下标（缺点）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-用foreach遍历集合"><a href="#6-用foreach遍历集合" class="headerlink" title="6.用foreach遍历集合"></a>6.用foreach遍历集合</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    集合使用foreach</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建List集合</span></span><br><span class="line">        List&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        strings.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;tong&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;tong&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s:strings) &#123;    <span class="comment">//因为泛型使用的是String</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-TreeSet集合"><a href="#7-TreeSet集合" class="headerlink" title="7.TreeSet集合"></a>7.TreeSet集合</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo7</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    TreeSet集合存储元素的特点:</span></span><br><span class="line"><span class="comment">        1.无序不可重复，但是存储的元素可以自动按照大小排序</span></span><br><span class="line"><span class="comment">        称为：可排序集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个Set集合</span></span><br><span class="line">        Set&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        strings.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;Z&quot;</span>);</span><br><span class="line">        strings.add(<span class="string">&quot;K&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s:strings) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从小到大排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-Map集合"><a href="#8-Map集合" class="headerlink" title="8.Map集合"></a>8.Map集合</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo8</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.Map接口中常用的方法：</span></span><br><span class="line"><span class="comment">        1.Map和Collection没有继承关系。</span></span><br><span class="line"><span class="comment">        2.Map集合已Key和Value的方式存储数据，键值对</span></span><br><span class="line"><span class="comment">            key 和 value都是引用数据类型。</span></span><br><span class="line"><span class="comment">            key 和  value都是存储对象的内存地址</span></span><br><span class="line"><span class="comment">            key起到主导的地位，value是key的一个附属品</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        3.Map接口中的常用方法</span></span><br><span class="line"><span class="comment">        V put(K key, V value)   向Map中添加键值对</span></span><br><span class="line"><span class="comment">        V get(Object key)    判断Map中是否包含某个Key</span></span><br><span class="line"><span class="comment">        void clear()    清空Map集合</span></span><br><span class="line"><span class="comment">        boolean containsKey(Object key)     如果此映射包含指定键的映射，则返回 true 。</span></span><br><span class="line"><span class="comment">        boolean containsValue(Object value)     判断Map中是否包含某个Value</span></span><br><span class="line"><span class="comment">        boolean isEmpty()   判断Map集合中的元素个数是否为0</span></span><br><span class="line"><span class="comment">        Set&lt;K&gt; keySet()     获取Map所有的Key</span></span><br><span class="line"><span class="comment">        V remove(Object key)    删除对应Key的</span></span><br><span class="line"><span class="comment">        int size()  获取Map集合中键值对的个数</span></span><br><span class="line"><span class="comment">        Collection&lt;V&gt; values()  获取Map集合中所有的value，返回一个Collection</span></span><br><span class="line"><span class="comment">        Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()  将Map集合转换成Set集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//向Map集合中添加键值对</span></span><br><span class="line">        map.put(<span class="number">1</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>,<span class="string">&quot;zhaoliu&quot;</span>);</span><br><span class="line">       <span class="comment">//通过Key获取value</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span>  map.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">//获取键值对的数量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;键值对的数量：&quot;</span>+map.size());</span><br><span class="line">        <span class="comment">//通过key删除key-value</span></span><br><span class="line">        map.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;键值对的数量：&quot;</span>+map.size());</span><br><span class="line">        <span class="comment">//判断是否包含某个Key</span></span><br><span class="line">        <span class="comment">//contains方法底层调用的都是equals进行对比，所以自定义的类型需要重写equals方法</span></span><br><span class="line">        System.out.println(map.containsKey(<span class="number">4</span>));</span><br><span class="line">        <span class="comment">//判断是否包含某个value</span></span><br><span class="line">        System.out.println(map.containsValue(<span class="string">&quot;wangwu&quot;</span>));</span><br><span class="line">        <span class="comment">//获取所有的Value</span></span><br><span class="line">        Collection&lt;String&gt; values = map.values();</span><br><span class="line">        <span class="keyword">for</span> (String s:values) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空Map集合</span></span><br><span class="line">        map.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;键值对的数量：&quot;</span>+map.size());</span><br><span class="line">        <span class="comment">//判断是否为空</span></span><br><span class="line">        System.out.println(map.isEmpty());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java基础学习第八天</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础学习day10</title>
    <url>/2023/03/03/javafoundationday10/</url>
    <content><![CDATA[<h4 id="1-线程的创建方式（第一种用继承类方式实现多线程）"><a href="#1-线程的创建方式（第一种用继承类方式实现多线程）" class="headerlink" title="1.线程的创建方式（第一种用继承类方式实现多线程）"></a>1.线程的创建方式（第一种用继承类方式实现多线程）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    多线程</span></span><br><span class="line"><span class="comment">        1.什么是进程，什么是线程？</span></span><br><span class="line"><span class="comment">        进程是一个应用程序（1个进程是一个软件）</span></span><br><span class="line"><span class="comment">        线程是一个进程中的执行场景\执行单元。</span></span><br><span class="line"><span class="comment">        一个进程可以启动多个线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2.对于java程序来说，当在Dos命令窗口中输入：</span></span><br><span class="line"><span class="comment">        java HelloWorld回车之后</span></span><br><span class="line"><span class="comment">        会先启动JVM，而JVM就是一个进程。</span></span><br><span class="line"><span class="comment">        JVM再启动一个主线程调用main方法</span></span><br><span class="line"><span class="comment">        同时在启动一个垃圾回收线程负责看护回收垃圾。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意：进程A和进程B的内存独立不共享。</span></span><br><span class="line"><span class="comment">            线程A和线程B</span></span><br><span class="line"><span class="comment">                在java语言中:</span></span><br><span class="line"><span class="comment">                线程A和线程B，堆内存和方法区内存共享</span></span><br><span class="line"><span class="comment">                但是栈内存独立，一个线程一个栈</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    java语言中，实现线程有两种方式</span></span><br><span class="line"><span class="comment">        第一种方式：编写一个类，直接继承java.lang.Thread,重写run方法</span></span><br><span class="line"><span class="comment">        创建线程对象</span></span><br><span class="line"><span class="comment">        启动线程</span></span><br><span class="line"><span class="comment">        第二种方式:编写一个类，实现java.lang.Runnable接口,实现run方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//这里是main方法，这里的代码属于主线程，在主栈中运行。</span></span><br><span class="line">        <span class="comment">//新建一个分支线程对象</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        myThread.start();<span class="comment">//start()方法的作用是：启动一个分支线程，在JVM中开辟一个新的栈空间，这段代码任务完成之后，瞬间结束了</span></span><br><span class="line">        <span class="comment">//  这段代码的任务只是为了开启一个新的栈空间，只要新的栈空间开出来，start()方法就结束了，线程就启动成功了。</span></span><br><span class="line">        <span class="comment">//启动成功的线程会自动调用run方法，并且run方法在分支栈的栈底部(压栈)</span></span><br><span class="line">        <span class="comment">//run方法在分支栈的底部，main方法在主栈的底部，run和main是平级的。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程-----&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个类，直接继承java.lang.Thread,重写run方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//编写程序，这段程序运行在分支线程中（分支栈）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;分支线程------&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-用接口的方式实现多线程（推荐）"><a href="#2-用接口的方式实现多线程（推荐）" class="headerlink" title="2.用接口的方式实现多线程（推荐）"></a>2.用接口的方式实现多线程（推荐）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实现线程的第二种方法，编写一个类实现java.lang.Runnable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个可运行的对象</span></span><br><span class="line"><span class="comment">//        MyRunnable myRunnable = new MyRunnable();</span></span><br><span class="line">        <span class="comment">//将可运行的对象封装成一个线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());<span class="comment">//代码合并</span></span><br><span class="line">        <span class="comment">//启动线程对象</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程-------&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;分支线程输出----&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java基础学习第十天</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础学习day09</title>
    <url>/2023/03/03/javafoundationday09/</url>
    <content><![CDATA[<h4 id="1-静态内部类"><a href="#1-静态内部类" class="headerlink" title="1.静态内部类"></a>1.静态内部类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="comment">//声明一个静态内部类</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">       <span class="comment">//静态方法</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;静态内部类的m1方法执行&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//实例方法要创建对象</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;静态内部类中的实例方法执行&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Demo1.InnerClass.m1();</span><br><span class="line">        <span class="type">InnerClass</span> <span class="variable">innerClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">        innerClass.m2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-Map集合的遍历"><a href="#2-Map集合的遍历" class="headerlink" title="2.Map集合的遍历"></a>2.Map集合的遍历</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jdi.Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Map集合的遍历</span></span><br><span class="line"><span class="comment">        1.获取所有的Key，通过遍历Key，来遍历value</span></span><br><span class="line"><span class="comment">        2.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取所有的Key，通过遍历Key，来遍历value</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>,<span class="string">&quot;zhaoliu&quot;</span>);</span><br><span class="line">        <span class="comment">//先获取所有的Key，所有的Key是Set集合</span></span><br><span class="line">        Set&lt;Integer&gt; keys = map.keySet();</span><br><span class="line">        <span class="comment">//遍历Key，通过Key获取Value</span></span><br><span class="line">        <span class="comment">//迭代器</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = keys.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line">            System.out.println(map.get(iterator.next()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//增强for循环也可以</span></span><br><span class="line">        <span class="keyword">for</span> (Integer integer:keys) &#123;</span><br><span class="line">            System.out.println(map.get(integer));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种方式Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</span></span><br><span class="line">        <span class="comment">//以上这个方式是吧，Map集合直接全部转换成Set集合</span></span><br><span class="line">        <span class="comment">//Set集合中的元素类型是：Map.Entry</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer,String&gt;&gt; set = map.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator1 = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java基础学习第九天</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础学习day11</title>
    <url>/2023/03/03/javafoundationday11/</url>
    <content><![CDATA[<h4 id="1-线程的Sleep方法"><a href="#1-线程的Sleep方法" class="headerlink" title="1.线程的Sleep方法"></a>1.线程的Sleep方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-----&gt;&quot;</span>+i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.getMessage();</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-如何终止线程睡眠"><a href="#2-如何终止线程睡眠" class="headerlink" title="2.如何终止线程睡眠"></a>2.如何终止线程睡眠</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    终止正在睡眠的线程</span></span><br><span class="line"><span class="comment">    不是终止线程，是终止线程的睡眠</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        thread.start();</span><br><span class="line">        thread.setName(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//终断睡眠，唤醒线程</span></span><br><span class="line">        thread.interrupt();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-----&gt;start&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">365</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-----&gt;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-如何强制终止线程（第一种方式）"><a href="#3-如何强制终止线程（第一种方式）" class="headerlink" title="3.如何强制终止线程（第一种方式）"></a>3.如何强制终止线程（第一种方式）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.plaf.TableHeaderUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    强行终止一个线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread1</span>());</span><br><span class="line">        thread.setName(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//强行终止线程t</span></span><br><span class="line">        thread.stop();<span class="comment">//已过时，不建议使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-----&gt;&quot;</span>+i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-如何强制终止线程（第二种方式）【推荐使用第二种】"><a href="#3-如何强制终止线程（第二种方式）【推荐使用第二种】" class="headerlink" title="3.如何强制终止线程（第二种方式）【推荐使用第二种】"></a>3.如何强制终止线程（第二种方式）【推荐使用第二种】</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.plaf.TableHeaderUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    怎么合理的终止一个线程的执行</span></span><br><span class="line"><span class="comment">    常用方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">myThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myThread2);</span><br><span class="line">        thread.setName(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//终止线程，什么时候想结束线程，把标记改为false</span></span><br><span class="line">        myThread2.run =<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">run</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (run)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;---&gt;&quot;</span>+i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//需要保存的数据在这里保存即可</span></span><br><span class="line">                <span class="comment">//终止当前线程</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java基础学习第十一天</tag>
      </tags>
  </entry>
</search>
